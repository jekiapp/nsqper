// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jekiapp/topic-master/internal/logic/auth (interfaces: ICheckUserActionPermission)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	acl "github.com/jekiapp/topic-master/internal/model/acl"
	entity "github.com/jekiapp/topic-master/internal/model/entity"
)

// MockICheckUserActionPermission is a mock of ICheckUserActionPermission interface.
type MockICheckUserActionPermission struct {
	ctrl     *gomock.Controller
	recorder *MockICheckUserActionPermissionMockRecorder
}

// MockICheckUserActionPermissionMockRecorder is the mock recorder for MockICheckUserActionPermission.
type MockICheckUserActionPermissionMockRecorder struct {
	mock *MockICheckUserActionPermission
}

// NewMockICheckUserActionPermission creates a new mock instance.
func NewMockICheckUserActionPermission(ctrl *gomock.Controller) *MockICheckUserActionPermission {
	mock := &MockICheckUserActionPermission{ctrl: ctrl}
	mock.recorder = &MockICheckUserActionPermissionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICheckUserActionPermission) EXPECT() *MockICheckUserActionPermissionMockRecorder {
	return m.recorder
}

// GetEntityByID mocks base method.
func (m *MockICheckUserActionPermission) GetEntityByID(arg0 string) (*entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByID", arg0)
	ret0, _ := ret[0].(*entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByID indicates an expected call of GetEntityByID.
func (mr *MockICheckUserActionPermissionMockRecorder) GetEntityByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByID", reflect.TypeOf((*MockICheckUserActionPermission)(nil).GetEntityByID), arg0)
}

// GetGroupsByUserID mocks base method.
func (m *MockICheckUserActionPermission) GetGroupsByUserID(arg0 string) ([]acl.GroupRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByUserID", arg0)
	ret0, _ := ret[0].([]acl.GroupRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByUserID indicates an expected call of GetGroupsByUserID.
func (mr *MockICheckUserActionPermissionMockRecorder) GetGroupsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByUserID", reflect.TypeOf((*MockICheckUserActionPermission)(nil).GetGroupsByUserID), arg0)
}

// GetPermissionByActionEntity mocks base method.
func (m *MockICheckUserActionPermission) GetPermissionByActionEntity(arg0, arg1, arg2 string) (acl.PermissionMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByActionEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].(acl.PermissionMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionByActionEntity indicates an expected call of GetPermissionByActionEntity.
func (mr *MockICheckUserActionPermissionMockRecorder) GetPermissionByActionEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByActionEntity", reflect.TypeOf((*MockICheckUserActionPermission)(nil).GetPermissionByActionEntity), arg0, arg1, arg2)
}
