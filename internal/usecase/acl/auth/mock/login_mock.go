// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jekiapp/topic-master/internal/usecase/acl/auth (interfaces: IUserLoginRepo)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	acl "github.com/jekiapp/topic-master/internal/model/acl"
)

// MockIUserLoginRepo is a mock of IUserLoginRepo interface.
type MockIUserLoginRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserLoginRepoMockRecorder
}

// MockIUserLoginRepoMockRecorder is the mock recorder for MockIUserLoginRepo.
type MockIUserLoginRepoMockRecorder struct {
	mock *MockIUserLoginRepo
}

// NewMockIUserLoginRepo creates a new mock instance.
func NewMockIUserLoginRepo(ctrl *gomock.Controller) *MockIUserLoginRepo {
	mock := &MockIUserLoginRepo{ctrl: ctrl}
	mock.recorder = &MockIUserLoginRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserLoginRepo) EXPECT() *MockIUserLoginRepoMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method.
func (m *MockIUserLoginRepo) GetUserByUsername(arg0 string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserLoginRepoMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserLoginRepo)(nil).GetUserByUsername), arg0)
}

// InsertResetPassword mocks base method.
func (m *MockIUserLoginRepo) InsertResetPassword(arg0 acl.ResetPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertResetPassword indicates an expected call of InsertResetPassword.
func (mr *MockIUserLoginRepoMockRecorder) InsertResetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResetPassword", reflect.TypeOf((*MockIUserLoginRepo)(nil).InsertResetPassword), arg0)
}

// ListGroupsForUser mocks base method.
func (m *MockIUserLoginRepo) ListGroupsForUser(arg0 string) ([]acl.GroupRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsForUser", arg0)
	ret0, _ := ret[0].([]acl.GroupRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupsForUser indicates an expected call of ListGroupsForUser.
func (mr *MockIUserLoginRepoMockRecorder) ListGroupsForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsForUser", reflect.TypeOf((*MockIUserLoginRepo)(nil).ListGroupsForUser), arg0)
}
