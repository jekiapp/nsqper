// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jekiapp/topic-master/internal/usecase/acl/auth (interfaces: IViewSignupApplicationRepo)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	acl "github.com/jekiapp/topic-master/internal/model/acl"
)

// MockIViewSignupApplicationRepo is a mock of IViewSignupApplicationRepo interface.
type MockIViewSignupApplicationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIViewSignupApplicationRepoMockRecorder
}

// MockIViewSignupApplicationRepoMockRecorder is the mock recorder for MockIViewSignupApplicationRepo.
type MockIViewSignupApplicationRepoMockRecorder struct {
	mock *MockIViewSignupApplicationRepo
}

// NewMockIViewSignupApplicationRepo creates a new mock instance.
func NewMockIViewSignupApplicationRepo(ctrl *gomock.Controller) *MockIViewSignupApplicationRepo {
	mock := &MockIViewSignupApplicationRepo{ctrl: ctrl}
	mock.recorder = &MockIViewSignupApplicationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIViewSignupApplicationRepo) EXPECT() *MockIViewSignupApplicationRepoMockRecorder {
	return m.recorder
}

// GetApplicationByID mocks base method.
func (m *MockIViewSignupApplicationRepo) GetApplicationByID(arg0 string) (acl.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", arg0)
	ret0, _ := ret[0].(acl.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockIViewSignupApplicationRepoMockRecorder) GetApplicationByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).GetApplicationByID), arg0)
}

// GetGroupByID mocks base method.
func (m *MockIViewSignupApplicationRepo) GetGroupByID(arg0 string) (acl.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", arg0)
	ret0, _ := ret[0].(acl.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockIViewSignupApplicationRepoMockRecorder) GetGroupByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).GetGroupByID), arg0)
}

// GetUserByID mocks base method.
func (m *MockIViewSignupApplicationRepo) GetUserByID(arg0 string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIViewSignupApplicationRepoMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).GetUserByID), arg0)
}

// GetUserGroup mocks base method.
func (m *MockIViewSignupApplicationRepo) GetUserGroup(arg0, arg1 string) (acl.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroup", arg0, arg1)
	ret0, _ := ret[0].(acl.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroup indicates an expected call of GetUserGroup.
func (mr *MockIViewSignupApplicationRepoMockRecorder) GetUserGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroup", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).GetUserGroup), arg0, arg1)
}

// GetUserPendingByID mocks base method.
func (m *MockIViewSignupApplicationRepo) GetUserPendingByID(arg0 string) (acl.UserPending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPendingByID", arg0)
	ret0, _ := ret[0].(acl.UserPending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPendingByID indicates an expected call of GetUserPendingByID.
func (mr *MockIViewSignupApplicationRepoMockRecorder) GetUserPendingByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPendingByID", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).GetUserPendingByID), arg0)
}

// ListAssignmentsByApplicationID mocks base method.
func (m *MockIViewSignupApplicationRepo) ListAssignmentsByApplicationID(arg0 string) ([]acl.ApplicationAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignmentsByApplicationID", arg0)
	ret0, _ := ret[0].([]acl.ApplicationAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssignmentsByApplicationID indicates an expected call of ListAssignmentsByApplicationID.
func (mr *MockIViewSignupApplicationRepoMockRecorder) ListAssignmentsByApplicationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignmentsByApplicationID", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).ListAssignmentsByApplicationID), arg0)
}

// ListHistoriesByApplicationID mocks base method.
func (m *MockIViewSignupApplicationRepo) ListHistoriesByApplicationID(arg0 string) ([]acl.ApplicationHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHistoriesByApplicationID", arg0)
	ret0, _ := ret[0].([]acl.ApplicationHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistoriesByApplicationID indicates an expected call of ListHistoriesByApplicationID.
func (mr *MockIViewSignupApplicationRepoMockRecorder) ListHistoriesByApplicationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistoriesByApplicationID", reflect.TypeOf((*MockIViewSignupApplicationRepo)(nil).ListHistoriesByApplicationID), arg0)
}
