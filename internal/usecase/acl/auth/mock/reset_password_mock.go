// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jekiapp/topic-master/internal/usecase/acl/auth (interfaces: IResetPasswordRepo,IUserRepo)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	acl "github.com/jekiapp/topic-master/internal/model/acl"
)

// MockIResetPasswordRepo is a mock of IResetPasswordRepo interface.
type MockIResetPasswordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIResetPasswordRepoMockRecorder
}

// MockIResetPasswordRepoMockRecorder is the mock recorder for MockIResetPasswordRepo.
type MockIResetPasswordRepoMockRecorder struct {
	mock *MockIResetPasswordRepo
}

// NewMockIResetPasswordRepo creates a new mock instance.
func NewMockIResetPasswordRepo(ctrl *gomock.Controller) *MockIResetPasswordRepo {
	mock := &MockIResetPasswordRepo{ctrl: ctrl}
	mock.recorder = &MockIResetPasswordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResetPasswordRepo) EXPECT() *MockIResetPasswordRepoMockRecorder {
	return m.recorder
}

// DeleteResetPasswordByToken mocks base method.
func (m *MockIResetPasswordRepo) DeleteResetPasswordByToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResetPasswordByToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResetPasswordByToken indicates an expected call of DeleteResetPasswordByToken.
func (mr *MockIResetPasswordRepoMockRecorder) DeleteResetPasswordByToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetPasswordByToken", reflect.TypeOf((*MockIResetPasswordRepo)(nil).DeleteResetPasswordByToken), arg0)
}

// GetResetPasswordByToken mocks base method.
func (m *MockIResetPasswordRepo) GetResetPasswordByToken(arg0 string) (acl.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordByToken", arg0)
	ret0, _ := ret[0].(acl.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordByToken indicates an expected call of GetResetPasswordByToken.
func (mr *MockIResetPasswordRepoMockRecorder) GetResetPasswordByToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordByToken", reflect.TypeOf((*MockIResetPasswordRepo)(nil).GetResetPasswordByToken), arg0)
}

// GetResetPasswordByUsername mocks base method.
func (m *MockIResetPasswordRepo) GetResetPasswordByUsername(arg0 string) (acl.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordByUsername", arg0)
	ret0, _ := ret[0].(acl.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordByUsername indicates an expected call of GetResetPasswordByUsername.
func (mr *MockIResetPasswordRepoMockRecorder) GetResetPasswordByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordByUsername", reflect.TypeOf((*MockIResetPasswordRepo)(nil).GetResetPasswordByUsername), arg0)
}

// MockIUserRepo is a mock of IUserRepo interface.
type MockIUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepoMockRecorder
}

// MockIUserRepoMockRecorder is the mock recorder for MockIUserRepo.
type MockIUserRepoMockRecorder struct {
	mock *MockIUserRepo
}

// NewMockIUserRepo creates a new mock instance.
func NewMockIUserRepo(ctrl *gomock.Controller) *MockIUserRepo {
	mock := &MockIUserRepo{ctrl: ctrl}
	mock.recorder = &MockIUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepo) EXPECT() *MockIUserRepoMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method.
func (m *MockIUserRepo) GetUserByUsername(arg0 string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserRepoMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserRepo)(nil).GetUserByUsername), arg0)
}

// UpdateUser mocks base method.
func (m *MockIUserRepo) UpdateUser(arg0 acl.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserRepoMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserRepo)(nil).UpdateUser), arg0)
}
