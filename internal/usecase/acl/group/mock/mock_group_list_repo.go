// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/acl/group/get_group_list.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/acl/group/get_group_list.go -destination=internal/usecase/acl/group/mock/mock_group_list_repo.go -package=group_mock
//

// Package group_mock is a generated GoMock package.
package group_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiGroupListRepo is a mock of iGroupListRepo interface.
type MockiGroupListRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiGroupListRepoMockRecorder
}

// MockiGroupListRepoMockRecorder is the mock recorder for MockiGroupListRepo.
type MockiGroupListRepoMockRecorder struct {
	mock *MockiGroupListRepo
}

// NewMockiGroupListRepo creates a new mock instance.
func NewMockiGroupListRepo(ctrl *gomock.Controller) *MockiGroupListRepo {
	mock := &MockiGroupListRepo{ctrl: ctrl}
	mock.recorder = &MockiGroupListRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiGroupListRepo) EXPECT() *MockiGroupListRepoMockRecorder {
	return m.recorder
}

// GetAllGroups mocks base method.
func (m *MockiGroupListRepo) GetAllGroups() ([]acl.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]acl.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockiGroupListRepoMockRecorder) GetAllGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockiGroupListRepo)(nil).GetAllGroups))
}

// MockiUserGroupRepo is a mock of iUserGroupRepo interface.
type MockiUserGroupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUserGroupRepoMockRecorder
}

// MockiUserGroupRepoMockRecorder is the mock recorder for MockiUserGroupRepo.
type MockiUserGroupRepoMockRecorder struct {
	mock *MockiUserGroupRepo
}

// NewMockiUserGroupRepo creates a new mock instance.
func NewMockiUserGroupRepo(ctrl *gomock.Controller) *MockiUserGroupRepo {
	mock := &MockiUserGroupRepo{ctrl: ctrl}
	mock.recorder = &MockiUserGroupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserGroupRepo) EXPECT() *MockiUserGroupRepoMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockiUserGroupRepo) GetUserByID(userID string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockiUserGroupRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockiUserGroupRepo)(nil).GetUserByID), userID)
}

// ListUserGroupsByGroupID mocks base method.
func (m *MockiUserGroupRepo) ListUserGroupsByGroupID(groupID string, limit int) ([]acl.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGroupsByGroupID", groupID, limit)
	ret0, _ := ret[0].([]acl.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroupsByGroupID indicates an expected call of ListUserGroupsByGroupID.
func (mr *MockiUserGroupRepoMockRecorder) ListUserGroupsByGroupID(groupID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroupsByGroupID", reflect.TypeOf((*MockiUserGroupRepo)(nil).ListUserGroupsByGroupID), groupID, limit)
}
