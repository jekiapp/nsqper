// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/acl/group/get_group_list_simple.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/acl/group/get_group_list_simple.go -destination=internal/usecase/acl/group/mock/mock_group_list_simple_repo.go -package=group_mock
//

// Package group_mock is a generated GoMock package.
package group_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiGroupListSimpleRepo is a mock of iGroupListSimpleRepo interface.
type MockiGroupListSimpleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiGroupListSimpleRepoMockRecorder
}

// MockiGroupListSimpleRepoMockRecorder is the mock recorder for MockiGroupListSimpleRepo.
type MockiGroupListSimpleRepoMockRecorder struct {
	mock *MockiGroupListSimpleRepo
}

// NewMockiGroupListSimpleRepo creates a new mock instance.
func NewMockiGroupListSimpleRepo(ctrl *gomock.Controller) *MockiGroupListSimpleRepo {
	mock := &MockiGroupListSimpleRepo{ctrl: ctrl}
	mock.recorder = &MockiGroupListSimpleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiGroupListSimpleRepo) EXPECT() *MockiGroupListSimpleRepoMockRecorder {
	return m.recorder
}

// GetAllGroups mocks base method.
func (m *MockiGroupListSimpleRepo) GetAllGroups() ([]acl.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]acl.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockiGroupListSimpleRepoMockRecorder) GetAllGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockiGroupListSimpleRepo)(nil).GetAllGroups))
}
