// Code generated by MockGen. DO NOT EDIT.
// Source: change_user_password.go
//
// Generated by this command:
//
//	mockgen -source=change_user_password.go -destination=mock/mock_change_user_password_repo.go -package=user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiUserPasswordRepo is a mock of iUserPasswordRepo interface.
type MockiUserPasswordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUserPasswordRepoMockRecorder
}

// MockiUserPasswordRepoMockRecorder is the mock recorder for MockiUserPasswordRepo.
type MockiUserPasswordRepoMockRecorder struct {
	mock *MockiUserPasswordRepo
}

// NewMockiUserPasswordRepo creates a new mock instance.
func NewMockiUserPasswordRepo(ctrl *gomock.Controller) *MockiUserPasswordRepo {
	mock := &MockiUserPasswordRepo{ctrl: ctrl}
	mock.recorder = &MockiUserPasswordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserPasswordRepo) EXPECT() *MockiUserPasswordRepoMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockiUserPasswordRepo) GetUserByID(userID string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockiUserPasswordRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockiUserPasswordRepo)(nil).GetUserByID), userID)
}

// UpdateUser mocks base method.
func (m *MockiUserPasswordRepo) UpdateUser(user acl.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockiUserPasswordRepoMockRecorder) UpdateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockiUserPasswordRepo)(nil).UpdateUser), user)
}
