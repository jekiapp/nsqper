// Code generated by MockGen. DO NOT EDIT.
// Source: create_user.go
//
// Generated by this command:
//
//	mockgen -source=create_user.go -destination=mock/mock_create_user_repo.go -package=user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiUserRepo is a mock of iUserRepo interface.
type MockiUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUserRepoMockRecorder
}

// MockiUserRepoMockRecorder is the mock recorder for MockiUserRepo.
type MockiUserRepoMockRecorder struct {
	mock *MockiUserRepo
}

// NewMockiUserRepo creates a new mock instance.
func NewMockiUserRepo(ctrl *gomock.Controller) *MockiUserRepo {
	mock := &MockiUserRepo{ctrl: ctrl}
	mock.recorder = &MockiUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserRepo) EXPECT() *MockiUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockiUserRepo) CreateUser(user acl.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockiUserRepoMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockiUserRepo)(nil).CreateUser), user)
}

// CreateUserGroup mocks base method.
func (m *MockiUserRepo) CreateUserGroup(userGroup acl.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserGroup", userGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserGroup indicates an expected call of CreateUserGroup.
func (mr *MockiUserRepoMockRecorder) CreateUserGroup(userGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroup", reflect.TypeOf((*MockiUserRepo)(nil).CreateUserGroup), userGroup)
}

// GetUserByUsername mocks base method.
func (m *MockiUserRepo) GetUserByUsername(username string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockiUserRepoMockRecorder) GetUserByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockiUserRepo)(nil).GetUserByUsername), username)
}
