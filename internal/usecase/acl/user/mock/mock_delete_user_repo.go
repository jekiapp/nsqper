// Code generated by MockGen. DO NOT EDIT.
// Source: delete_user.go
//
// Generated by this command:
//
//	mockgen -source=delete_user.go -destination=mock/mock_delete_user_repo.go -package=user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiUserDeleteRepo is a mock of iUserDeleteRepo interface.
type MockiUserDeleteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUserDeleteRepoMockRecorder
}

// MockiUserDeleteRepoMockRecorder is the mock recorder for MockiUserDeleteRepo.
type MockiUserDeleteRepoMockRecorder struct {
	mock *MockiUserDeleteRepo
}

// NewMockiUserDeleteRepo creates a new mock instance.
func NewMockiUserDeleteRepo(ctrl *gomock.Controller) *MockiUserDeleteRepo {
	mock := &MockiUserDeleteRepo{ctrl: ctrl}
	mock.recorder = &MockiUserDeleteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserDeleteRepo) EXPECT() *MockiUserDeleteRepoMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockiUserDeleteRepo) DeleteUser(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockiUserDeleteRepoMockRecorder) DeleteUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockiUserDeleteRepo)(nil).DeleteUser), userID)
}

// DeleteUserGroup mocks base method.
func (m *MockiUserDeleteRepo) DeleteUserGroup(userGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserGroup", userGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserGroup indicates an expected call of DeleteUserGroup.
func (mr *MockiUserDeleteRepoMockRecorder) DeleteUserGroup(userGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserGroup", reflect.TypeOf((*MockiUserDeleteRepo)(nil).DeleteUserGroup), userGroupID)
}

// ListUserGroupsByUserID mocks base method.
func (m *MockiUserDeleteRepo) ListUserGroupsByUserID(userID string) ([]acl.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGroupsByUserID", userID)
	ret0, _ := ret[0].([]acl.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroupsByUserID indicates an expected call of ListUserGroupsByUserID.
func (mr *MockiUserDeleteRepoMockRecorder) ListUserGroupsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroupsByUserID", reflect.TypeOf((*MockiUserDeleteRepo)(nil).ListUserGroupsByUserID), userID)
}
