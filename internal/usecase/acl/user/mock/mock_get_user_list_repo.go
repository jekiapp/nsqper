// Code generated by MockGen. DO NOT EDIT.
// Source: get_user_list.go
//
// Generated by this command:
//
//	mockgen -source=get_user_list.go -destination=mock/mock_get_user_list_repo.go -package=user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiUserDataRepo is a mock of iUserDataRepo interface.
type MockiUserDataRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUserDataRepoMockRecorder
}

// MockiUserDataRepoMockRecorder is the mock recorder for MockiUserDataRepo.
type MockiUserDataRepoMockRecorder struct {
	mock *MockiUserDataRepo
}

// NewMockiUserDataRepo creates a new mock instance.
func NewMockiUserDataRepo(ctrl *gomock.Controller) *MockiUserDataRepo {
	mock := &MockiUserDataRepo{ctrl: ctrl}
	mock.recorder = &MockiUserDataRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserDataRepo) EXPECT() *MockiUserDataRepoMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockiUserDataRepo) GetAllUsers() ([]acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockiUserDataRepoMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockiUserDataRepo)(nil).GetAllUsers))
}

// GetGroupByID mocks base method.
func (m *MockiUserDataRepo) GetGroupByID(groupID string) (acl.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", groupID)
	ret0, _ := ret[0].(acl.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockiUserDataRepoMockRecorder) GetGroupByID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockiUserDataRepo)(nil).GetGroupByID), groupID)
}

// ListUserGroupsByUserID mocks base method.
func (m *MockiUserDataRepo) ListUserGroupsByUserID(userID string) ([]acl.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGroupsByUserID", userID)
	ret0, _ := ret[0].([]acl.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroupsByUserID indicates an expected call of ListUserGroupsByUserID.
func (mr *MockiUserDataRepoMockRecorder) ListUserGroupsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroupsByUserID", reflect.TypeOf((*MockiUserDataRepo)(nil).ListUserGroupsByUserID), userID)
}
