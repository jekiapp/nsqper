// Code generated by MockGen. DO NOT EDIT.
// Source: signup.go
//
// Generated by this command:
//
//	mockgen -source=signup.go -destination=mock/mock_signup_repo.go -package=user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockISignupRepo is a mock of ISignupRepo interface.
type MockISignupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockISignupRepoMockRecorder
	isgomock struct{}
}

// MockISignupRepoMockRecorder is the mock recorder for MockISignupRepo.
type MockISignupRepoMockRecorder struct {
	mock *MockISignupRepo
}

// NewMockISignupRepo creates a new mock instance.
func NewMockISignupRepo(ctrl *gomock.Controller) *MockISignupRepo {
	mock := &MockISignupRepo{ctrl: ctrl}
	mock.recorder = &MockISignupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignupRepo) EXPECT() *MockISignupRepoMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockISignupRepo) CreateApplication(app acl.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockISignupRepoMockRecorder) CreateApplication(app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockISignupRepo)(nil).CreateApplication), app)
}

// CreateApplicationAssignment mocks base method.
func (m *MockISignupRepo) CreateApplicationAssignment(assignment acl.ApplicationAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationAssignment", assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationAssignment indicates an expected call of CreateApplicationAssignment.
func (mr *MockISignupRepoMockRecorder) CreateApplicationAssignment(assignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationAssignment", reflect.TypeOf((*MockISignupRepo)(nil).CreateApplicationAssignment), assignment)
}

// CreateApplicationHistory mocks base method.
func (m *MockISignupRepo) CreateApplicationHistory(history acl.ApplicationHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationHistory", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationHistory indicates an expected call of CreateApplicationHistory.
func (mr *MockISignupRepoMockRecorder) CreateApplicationHistory(history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationHistory", reflect.TypeOf((*MockISignupRepo)(nil).CreateApplicationHistory), history)
}

// CreateUserGroup mocks base method.
func (m *MockISignupRepo) CreateUserGroup(userGroup acl.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserGroup", userGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserGroup indicates an expected call of CreateUserGroup.
func (mr *MockISignupRepoMockRecorder) CreateUserGroup(userGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroup", reflect.TypeOf((*MockISignupRepo)(nil).CreateUserGroup), userGroup)
}

// CreateUserPending mocks base method.
func (m *MockISignupRepo) CreateUserPending(user acl.UserPending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPending", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserPending indicates an expected call of CreateUserPending.
func (mr *MockISignupRepoMockRecorder) CreateUserPending(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPending", reflect.TypeOf((*MockISignupRepo)(nil).CreateUserPending), user)
}

// GetAdminUserIDsByGroupID mocks base method.
func (m *MockISignupRepo) GetAdminUserIDsByGroupID(groupID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserIDsByGroupID", groupID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserIDsByGroupID indicates an expected call of GetAdminUserIDsByGroupID.
func (mr *MockISignupRepoMockRecorder) GetAdminUserIDsByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserIDsByGroupID", reflect.TypeOf((*MockISignupRepo)(nil).GetAdminUserIDsByGroupID), groupID)
}

// GetGroupByName mocks base method.
func (m *MockISignupRepo) GetGroupByName(name string) (acl.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByName", name)
	ret0, _ := ret[0].(acl.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByName indicates an expected call of GetGroupByName.
func (mr *MockISignupRepoMockRecorder) GetGroupByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByName", reflect.TypeOf((*MockISignupRepo)(nil).GetGroupByName), name)
}

// GetUserByID mocks base method.
func (m *MockISignupRepo) GetUserByID(userID string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockISignupRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockISignupRepo)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockISignupRepo) GetUserByUsername(username string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockISignupRepoMockRecorder) GetUserByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockISignupRepo)(nil).GetUserByUsername), username)
}

// ListUserGroupsByGroupID mocks base method.
func (m *MockISignupRepo) ListUserGroupsByGroupID(groupID string, limit int) ([]acl.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGroupsByGroupID", groupID, limit)
	ret0, _ := ret[0].([]acl.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroupsByGroupID indicates an expected call of ListUserGroupsByGroupID.
func (mr *MockISignupRepoMockRecorder) ListUserGroupsByGroupID(groupID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroupsByGroupID", reflect.TypeOf((*MockISignupRepo)(nil).ListUserGroupsByGroupID), groupID, limit)
}
