// Code generated by MockGen. DO NOT EDIT.
// Source: update_user.go
//
// Generated by this command:
//
//	mockgen -source=update_user.go -destination=mock/mock_update_user_repo.go -package=user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiUpdateUserRepo is a mock of iUpdateUserRepo interface.
type MockiUpdateUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUpdateUserRepoMockRecorder
}

// MockiUpdateUserRepoMockRecorder is the mock recorder for MockiUpdateUserRepo.
type MockiUpdateUserRepoMockRecorder struct {
	mock *MockiUpdateUserRepo
}

// NewMockiUpdateUserRepo creates a new mock instance.
func NewMockiUpdateUserRepo(ctrl *gomock.Controller) *MockiUpdateUserRepo {
	mock := &MockiUpdateUserRepo{ctrl: ctrl}
	mock.recorder = &MockiUpdateUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUpdateUserRepo) EXPECT() *MockiUpdateUserRepoMockRecorder {
	return m.recorder
}

// CreateUserGroup mocks base method.
func (m *MockiUpdateUserRepo) CreateUserGroup(userGroup acl.UserGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserGroup", userGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserGroup indicates an expected call of CreateUserGroup.
func (mr *MockiUpdateUserRepoMockRecorder) CreateUserGroup(userGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroup", reflect.TypeOf((*MockiUpdateUserRepo)(nil).CreateUserGroup), userGroup)
}

// DeleteUserGroupsByUserID mocks base method.
func (m *MockiUpdateUserRepo) DeleteUserGroupsByUserID(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserGroupsByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserGroupsByUserID indicates an expected call of DeleteUserGroupsByUserID.
func (mr *MockiUpdateUserRepoMockRecorder) DeleteUserGroupsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserGroupsByUserID", reflect.TypeOf((*MockiUpdateUserRepo)(nil).DeleteUserGroupsByUserID), userID)
}

// GetUserByID mocks base method.
func (m *MockiUpdateUserRepo) GetUserByID(userID string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockiUpdateUserRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockiUpdateUserRepo)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockiUpdateUserRepo) GetUserByUsername(username string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockiUpdateUserRepoMockRecorder) GetUserByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockiUpdateUserRepo)(nil).GetUserByUsername), username)
}

// ListUserGroupsByUserID mocks base method.
func (m *MockiUpdateUserRepo) ListUserGroupsByUserID(userID string) ([]acl.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGroupsByUserID", userID)
	ret0, _ := ret[0].([]acl.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroupsByUserID indicates an expected call of ListUserGroupsByUserID.
func (mr *MockiUpdateUserRepoMockRecorder) ListUserGroupsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroupsByUserID", reflect.TypeOf((*MockiUpdateUserRepo)(nil).ListUserGroupsByUserID), userID)
}

// UpdateUser mocks base method.
func (m *MockiUpdateUserRepo) UpdateUser(user acl.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockiUpdateUserRepoMockRecorder) UpdateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockiUpdateUserRepo)(nil).UpdateUser), user)
}
