// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/tickets/list_my_assignment.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/tickets/list_my_assignment.go -destination=internal/usecase/tickets/mock/mock_assignment_repo.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiAssignmentRepo is a mock of iAssignmentRepo interface.
type MockiAssignmentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiAssignmentRepoMockRecorder
}

// MockiAssignmentRepoMockRecorder is the mock recorder for MockiAssignmentRepo.
type MockiAssignmentRepoMockRecorder struct {
	mock *MockiAssignmentRepo
}

// NewMockiAssignmentRepo creates a new mock instance.
func NewMockiAssignmentRepo(ctrl *gomock.Controller) *MockiAssignmentRepo {
	mock := &MockiAssignmentRepo{ctrl: ctrl}
	mock.recorder = &MockiAssignmentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiAssignmentRepo) EXPECT() *MockiAssignmentRepoMockRecorder {
	return m.recorder
}

// GetApplicationByID mocks base method.
func (m *MockiAssignmentRepo) GetApplicationByID(appID string) (acl.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", appID)
	ret0, _ := ret[0].(acl.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockiAssignmentRepoMockRecorder) GetApplicationByID(appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockiAssignmentRepo)(nil).GetApplicationByID), appID)
}

// GetUserByID mocks base method.
func (m *MockiAssignmentRepo) GetUserByID(userID string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockiAssignmentRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockiAssignmentRepo)(nil).GetUserByID), userID)
}

// ListAssignmentsByReviewerIDPaginated mocks base method.
func (m *MockiAssignmentRepo) ListAssignmentsByReviewerIDPaginated(reviewerID string, page, limit int) ([]acl.ApplicationAssignment, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignmentsByReviewerIDPaginated", reviewerID, page, limit)
	ret0, _ := ret[0].([]acl.ApplicationAssignment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAssignmentsByReviewerIDPaginated indicates an expected call of ListAssignmentsByReviewerIDPaginated.
func (mr *MockiAssignmentRepoMockRecorder) ListAssignmentsByReviewerIDPaginated(reviewerID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignmentsByReviewerIDPaginated", reflect.TypeOf((*MockiAssignmentRepo)(nil).ListAssignmentsByReviewerIDPaginated), reviewerID, page, limit)
}
