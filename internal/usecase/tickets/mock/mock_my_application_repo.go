// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/tickets/list_my_applications.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/tickets/list_my_applications.go -destination=internal/usecase/tickets/mock/mock_my_application_repo.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	gomock "go.uber.org/mock/gomock"
)

// MockiMyApplicationRepo is a mock of iMyApplicationRepo interface.
type MockiMyApplicationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiMyApplicationRepoMockRecorder
}

// MockiMyApplicationRepoMockRecorder is the mock recorder for MockiMyApplicationRepo.
type MockiMyApplicationRepoMockRecorder struct {
	mock *MockiMyApplicationRepo
}

// NewMockiMyApplicationRepo creates a new mock instance.
func NewMockiMyApplicationRepo(ctrl *gomock.Controller) *MockiMyApplicationRepo {
	mock := &MockiMyApplicationRepo{ctrl: ctrl}
	mock.recorder = &MockiMyApplicationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiMyApplicationRepo) EXPECT() *MockiMyApplicationRepoMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockiMyApplicationRepo) GetUserByID(userID string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockiMyApplicationRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockiMyApplicationRepo)(nil).GetUserByID), userID)
}

// ListApplicationsByUserIDDescPaginated mocks base method.
func (m *MockiMyApplicationRepo) ListApplicationsByUserIDDescPaginated(userID string, page, limit int) ([]acl.Application, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsByUserIDDescPaginated", userID, page, limit)
	ret0, _ := ret[0].([]acl.Application)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplicationsByUserIDDescPaginated indicates an expected call of ListApplicationsByUserIDDescPaginated.
func (mr *MockiMyApplicationRepoMockRecorder) ListApplicationsByUserIDDescPaginated(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsByUserIDDescPaginated", reflect.TypeOf((*MockiMyApplicationRepo)(nil).ListApplicationsByUserIDDescPaginated), userID, page, limit)
}

// ListAssignmentsByApplicationID mocks base method.
func (m *MockiMyApplicationRepo) ListAssignmentsByApplicationID(appID string) ([]acl.ApplicationAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignmentsByApplicationID", appID)
	ret0, _ := ret[0].([]acl.ApplicationAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssignmentsByApplicationID indicates an expected call of ListAssignmentsByApplicationID.
func (mr *MockiMyApplicationRepoMockRecorder) ListAssignmentsByApplicationID(appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignmentsByApplicationID", reflect.TypeOf((*MockiMyApplicationRepo)(nil).ListAssignmentsByApplicationID), appID)
}
