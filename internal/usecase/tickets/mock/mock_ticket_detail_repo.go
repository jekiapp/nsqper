// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/tickets/ticket_detail.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/tickets/ticket_detail.go -destination=internal/usecase/tickets/mock/mock_ticket_detail_repo.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	acl "github.com/jekiapp/topic-master/internal/model/acl"
	entity "github.com/jekiapp/topic-master/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockiTicketDetailRepo is a mock of iTicketDetailRepo interface.
type MockiTicketDetailRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiTicketDetailRepoMockRecorder
}

// MockiTicketDetailRepoMockRecorder is the mock recorder for MockiTicketDetailRepo.
type MockiTicketDetailRepoMockRecorder struct {
	mock *MockiTicketDetailRepo
}

// NewMockiTicketDetailRepo creates a new mock instance.
func NewMockiTicketDetailRepo(ctrl *gomock.Controller) *MockiTicketDetailRepo {
	mock := &MockiTicketDetailRepo{ctrl: ctrl}
	mock.recorder = &MockiTicketDetailRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiTicketDetailRepo) EXPECT() *MockiTicketDetailRepoMockRecorder {
	return m.recorder
}

// GetApplicationByID mocks base method.
func (m *MockiTicketDetailRepo) GetApplicationByID(id string) (acl.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", id)
	ret0, _ := ret[0].(acl.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockiTicketDetailRepoMockRecorder) GetApplicationByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).GetApplicationByID), id)
}

// GetEntityByID mocks base method.
func (m *MockiTicketDetailRepo) GetEntityByID(id string) (entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByID", id)
	ret0, _ := ret[0].(entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByID indicates an expected call of GetEntityByID.
func (mr *MockiTicketDetailRepoMockRecorder) GetEntityByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).GetEntityByID), id)
}

// GetPermissionByID mocks base method.
func (m *MockiTicketDetailRepo) GetPermissionByID(id string) (acl.PermissionMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByID", id)
	ret0, _ := ret[0].(acl.PermissionMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionByID indicates an expected call of GetPermissionByID.
func (mr *MockiTicketDetailRepoMockRecorder) GetPermissionByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).GetPermissionByID), id)
}

// GetUserByID mocks base method.
func (m *MockiTicketDetailRepo) GetUserByID(id string) (acl.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(acl.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockiTicketDetailRepoMockRecorder) GetUserByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).GetUserByID), id)
}

// GetUserPendingByID mocks base method.
func (m *MockiTicketDetailRepo) GetUserPendingByID(id string) (acl.UserPending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPendingByID", id)
	ret0, _ := ret[0].(acl.UserPending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPendingByID indicates an expected call of GetUserPendingByID.
func (mr *MockiTicketDetailRepoMockRecorder) GetUserPendingByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPendingByID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).GetUserPendingByID), id)
}

// ListAssignmentsByApplicationID mocks base method.
func (m *MockiTicketDetailRepo) ListAssignmentsByApplicationID(appID string) ([]acl.ApplicationAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignmentsByApplicationID", appID)
	ret0, _ := ret[0].([]acl.ApplicationAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssignmentsByApplicationID indicates an expected call of ListAssignmentsByApplicationID.
func (mr *MockiTicketDetailRepoMockRecorder) ListAssignmentsByApplicationID(appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignmentsByApplicationID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).ListAssignmentsByApplicationID), appID)
}

// ListHistoriesByApplicationID mocks base method.
func (m *MockiTicketDetailRepo) ListHistoriesByApplicationID(appID string) ([]acl.ApplicationHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHistoriesByApplicationID", appID)
	ret0, _ := ret[0].([]acl.ApplicationHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistoriesByApplicationID indicates an expected call of ListHistoriesByApplicationID.
func (mr *MockiTicketDetailRepoMockRecorder) ListHistoriesByApplicationID(appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistoriesByApplicationID", reflect.TypeOf((*MockiTicketDetailRepo)(nil).ListHistoriesByApplicationID), appID)
}
