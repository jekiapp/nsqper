// Code generated by MockGen. DO NOT EDIT.
// Source: nsq_channel_list.go
//
// Generated by this command:
//
//	mockgen -source=nsq_channel_list.go -destination=mock_nsq_channel_list_repo.go -package=detail iNsqChannelListRepo
//

// Package detail is a generated GoMock package.
package detail

import (
	reflect "reflect"

	entity "github.com/jekiapp/topic-master/internal/model/entity"
	nsq "github.com/jekiapp/topic-master/internal/model/nsq"
	gomock "go.uber.org/mock/gomock"
)

// MockiNsqChannelListRepo is a mock of iNsqChannelListRepo interface.
type MockiNsqChannelListRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiNsqChannelListRepoMockRecorder
}

// MockiNsqChannelListRepoMockRecorder is the mock recorder for MockiNsqChannelListRepo.
type MockiNsqChannelListRepoMockRecorder struct {
	mock *MockiNsqChannelListRepo
}

// NewMockiNsqChannelListRepo creates a new mock instance.
func NewMockiNsqChannelListRepo(ctrl *gomock.Controller) *MockiNsqChannelListRepo {
	mock := &MockiNsqChannelListRepo{ctrl: ctrl}
	mock.recorder = &MockiNsqChannelListRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiNsqChannelListRepo) EXPECT() *MockiNsqChannelListRepoMockRecorder {
	return m.recorder
}

// CreateNsqChannelEntity mocks base method.
func (m *MockiNsqChannelListRepo) CreateNsqChannelEntity(topic, channel string) (*entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNsqChannelEntity", topic, channel)
	ret0, _ := ret[0].(*entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNsqChannelEntity indicates an expected call of CreateNsqChannelEntity.
func (mr *MockiNsqChannelListRepoMockRecorder) CreateNsqChannelEntity(topic, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNsqChannelEntity", reflect.TypeOf((*MockiNsqChannelListRepo)(nil).CreateNsqChannelEntity), topic, channel)
}

// DeleteChannel mocks base method.
func (m *MockiNsqChannelListRepo) DeleteChannel(topic, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", topic, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockiNsqChannelListRepoMockRecorder) DeleteChannel(topic, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockiNsqChannelListRepo)(nil).DeleteChannel), topic, channel)
}

// GetAllNsqChannelByTopic mocks base method.
func (m *MockiNsqChannelListRepo) GetAllNsqChannelByTopic(topic string) ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsqChannelByTopic", topic)
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsqChannelByTopic indicates an expected call of GetAllNsqChannelByTopic.
func (mr *MockiNsqChannelListRepoMockRecorder) GetAllNsqChannelByTopic(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsqChannelByTopic", reflect.TypeOf((*MockiNsqChannelListRepo)(nil).GetAllNsqChannelByTopic), topic)
}

// GetAllNsqTopicChannels mocks base method.
func (m *MockiNsqChannelListRepo) GetAllNsqTopicChannels(topic string) ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsqTopicChannels", topic)
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsqTopicChannels indicates an expected call of GetAllNsqTopicChannels.
func (mr *MockiNsqChannelListRepoMockRecorder) GetAllNsqTopicChannels(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsqTopicChannels", reflect.TypeOf((*MockiNsqChannelListRepo)(nil).GetAllNsqTopicChannels), topic)
}

// GetStats mocks base method.
func (m *MockiNsqChannelListRepo) GetStats(nsqdHosts []string, topic, channel string) ([]nsq.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", nsqdHosts, topic, channel)
	ret0, _ := ret[0].([]nsq.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockiNsqChannelListRepoMockRecorder) GetStats(nsqdHosts, topic, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockiNsqChannelListRepo)(nil).GetStats), nsqdHosts, topic, channel)
}

// IsBookmarked mocks base method.
func (m *MockiNsqChannelListRepo) IsBookmarked(id, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBookmarked", id, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBookmarked indicates an expected call of IsBookmarked.
func (mr *MockiNsqChannelListRepoMockRecorder) IsBookmarked(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBookmarked", reflect.TypeOf((*MockiNsqChannelListRepo)(nil).IsBookmarked), id, userID)
}
