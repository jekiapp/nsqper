// Code generated by MockGen. DO NOT EDIT.
// Source: nsq_topic_stats.go
//
// Generated by this command:
//
//	mockgen -source=nsq_topic_stats.go -destination=mock_nsq_topic_stats_repo.go -package=detail iNsqTopicStatsRepo
//

// Package detail is a generated GoMock package.
package detail

import (
	reflect "reflect"

	nsq "github.com/jekiapp/topic-master/internal/repository/nsq"
	gomock "go.uber.org/mock/gomock"
)

// MockiNsqTopicStatsRepo is a mock of iNsqTopicStatsRepo interface.
type MockiNsqTopicStatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiNsqTopicStatsRepoMockRecorder
}

// MockiNsqTopicStatsRepoMockRecorder is the mock recorder for MockiNsqTopicStatsRepo.
type MockiNsqTopicStatsRepoMockRecorder struct {
	mock *MockiNsqTopicStatsRepo
}

// NewMockiNsqTopicStatsRepo creates a new mock instance.
func NewMockiNsqTopicStatsRepo(ctrl *gomock.Controller) *MockiNsqTopicStatsRepo {
	mock := &MockiNsqTopicStatsRepo{ctrl: ctrl}
	mock.recorder = &MockiNsqTopicStatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiNsqTopicStatsRepo) EXPECT() *MockiNsqTopicStatsRepoMockRecorder {
	return m.recorder
}

// GetTopicStatsWithChannels mocks base method.
func (m *MockiNsqTopicStatsRepo) GetTopicStatsWithChannels(hosts []string, topic string) (nsq.TopicStatsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicStatsWithChannels", hosts, topic)
	ret0, _ := ret[0].(nsq.TopicStatsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicStatsWithChannels indicates an expected call of GetTopicStatsWithChannels.
func (mr *MockiNsqTopicStatsRepoMockRecorder) GetTopicStatsWithChannels(hosts, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicStatsWithChannels", reflect.TypeOf((*MockiNsqTopicStatsRepo)(nil).GetTopicStatsWithChannels), hosts, topic)
}
