// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/topic/list_my_topics.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/topic/list_my_topics.go -destination=internal/usecase/topic/mock/mock_list_my_bookmarked_topics_repo.go -package=topic
//

// Package topic is a generated GoMock package.
package topic

import (
	reflect "reflect"

	entity "github.com/jekiapp/topic-master/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockiListMyBookmarkedTopicsRepo is a mock of iListMyBookmarkedTopicsRepo interface.
type MockiListMyBookmarkedTopicsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiListMyBookmarkedTopicsRepoMockRecorder
}

// MockiListMyBookmarkedTopicsRepoMockRecorder is the mock recorder for MockiListMyBookmarkedTopicsRepo.
type MockiListMyBookmarkedTopicsRepoMockRecorder struct {
	mock *MockiListMyBookmarkedTopicsRepo
}

// NewMockiListMyBookmarkedTopicsRepo creates a new mock instance.
func NewMockiListMyBookmarkedTopicsRepo(ctrl *gomock.Controller) *MockiListMyBookmarkedTopicsRepo {
	mock := &MockiListMyBookmarkedTopicsRepo{ctrl: ctrl}
	mock.recorder = &MockiListMyBookmarkedTopicsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiListMyBookmarkedTopicsRepo) EXPECT() *MockiListMyBookmarkedTopicsRepoMockRecorder {
	return m.recorder
}

// GetNsqTopicEntitiesByIDs mocks base method.
func (m *MockiListMyBookmarkedTopicsRepo) GetNsqTopicEntitiesByIDs(ids []string) ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNsqTopicEntitiesByIDs", ids)
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNsqTopicEntitiesByIDs indicates an expected call of GetNsqTopicEntitiesByIDs.
func (mr *MockiListMyBookmarkedTopicsRepoMockRecorder) GetNsqTopicEntitiesByIDs(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNsqTopicEntitiesByIDs", reflect.TypeOf((*MockiListMyBookmarkedTopicsRepo)(nil).GetNsqTopicEntitiesByIDs), ids)
}

// ListBookmarkedTopicIDsByUser mocks base method.
func (m *MockiListMyBookmarkedTopicsRepo) ListBookmarkedTopicIDsByUser(userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarkedTopicIDsByUser", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarkedTopicIDsByUser indicates an expected call of ListBookmarkedTopicIDsByUser.
func (mr *MockiListMyBookmarkedTopicsRepoMockRecorder) ListBookmarkedTopicIDsByUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarkedTopicIDsByUser", reflect.TypeOf((*MockiListMyBookmarkedTopicsRepo)(nil).ListBookmarkedTopicIDsByUser), userID)
}
