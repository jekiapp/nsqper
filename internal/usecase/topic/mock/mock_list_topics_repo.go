// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/topic/list_all_topics.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/topic/list_all_topics.go -destination=internal/usecase/topic/mock/mock_list_topics_repo.go -package=topic
//

// Package topic is a generated GoMock package.
package topic

import (
	reflect "reflect"

	entity "github.com/jekiapp/topic-master/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockiListTopicsRepo is a mock of iListTopicsRepo interface.
type MockiListTopicsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiListTopicsRepoMockRecorder
}

// MockiListTopicsRepoMockRecorder is the mock recorder for MockiListTopicsRepo.
type MockiListTopicsRepoMockRecorder struct {
	mock *MockiListTopicsRepo
}

// NewMockiListTopicsRepo creates a new mock instance.
func NewMockiListTopicsRepo(ctrl *gomock.Controller) *MockiListTopicsRepo {
	mock := &MockiListTopicsRepo{ctrl: ctrl}
	mock.recorder = &MockiListTopicsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiListTopicsRepo) EXPECT() *MockiListTopicsRepoMockRecorder {
	return m.recorder
}

// GetAllNsqTopicEntities mocks base method.
func (m *MockiListTopicsRepo) GetAllNsqTopicEntities() ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsqTopicEntities")
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsqTopicEntities indicates an expected call of GetAllNsqTopicEntities.
func (mr *MockiListTopicsRepoMockRecorder) GetAllNsqTopicEntities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsqTopicEntities", reflect.TypeOf((*MockiListTopicsRepo)(nil).GetAllNsqTopicEntities))
}

// IsBookmarked mocks base method.
func (m *MockiListTopicsRepo) IsBookmarked(entityID, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBookmarked", entityID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBookmarked indicates an expected call of IsBookmarked.
func (mr *MockiListTopicsRepoMockRecorder) IsBookmarked(entityID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBookmarked", reflect.TypeOf((*MockiListTopicsRepo)(nil).IsBookmarked), entityID, userID)
}

// ListNsqTopicEntitiesByGroup mocks base method.
func (m *MockiListTopicsRepo) ListNsqTopicEntitiesByGroup(group string) ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNsqTopicEntitiesByGroup", group)
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNsqTopicEntitiesByGroup indicates an expected call of ListNsqTopicEntitiesByGroup.
func (mr *MockiListTopicsRepoMockRecorder) ListNsqTopicEntitiesByGroup(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNsqTopicEntitiesByGroup", reflect.TypeOf((*MockiListTopicsRepo)(nil).ListNsqTopicEntitiesByGroup), group)
}
