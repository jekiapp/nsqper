// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/topic/sync_topics.go
//
// Generated by this command:
//
//	Cursor-0.48.8-x86_64.AppImage -source=internal/usecase/topic/sync_topics.go -destination=internal/usecase/topic/mock/mock_sync_topics_repo.go -package=topic
//

// Package topic is a generated GoMock package.
package topic

import (
	reflect "reflect"

	entity "github.com/jekiapp/topic-master/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockiSyncTopicsRepo is a mock of iSyncTopicsRepo interface.
type MockiSyncTopicsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiSyncTopicsRepoMockRecorder
}

// MockiSyncTopicsRepoMockRecorder is the mock recorder for MockiSyncTopicsRepo.
type MockiSyncTopicsRepoMockRecorder struct {
	mock *MockiSyncTopicsRepo
}

// NewMockiSyncTopicsRepo creates a new mock instance.
func NewMockiSyncTopicsRepo(ctrl *gomock.Controller) *MockiSyncTopicsRepo {
	mock := &MockiSyncTopicsRepo{ctrl: ctrl}
	mock.recorder = &MockiSyncTopicsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiSyncTopicsRepo) EXPECT() *MockiSyncTopicsRepoMockRecorder {
	return m.recorder
}

// CreateNsqChannelEntity mocks base method.
func (m *MockiSyncTopicsRepo) CreateNsqChannelEntity(topic, channel string) (*entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNsqChannelEntity", topic, channel)
	ret0, _ := ret[0].(*entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNsqChannelEntity indicates an expected call of CreateNsqChannelEntity.
func (mr *MockiSyncTopicsRepoMockRecorder) CreateNsqChannelEntity(topic, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNsqChannelEntity", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).CreateNsqChannelEntity), topic, channel)
}

// CreateNsqTopicEntity mocks base method.
func (m *MockiSyncTopicsRepo) CreateNsqTopicEntity(topic string) (*entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNsqTopicEntity", topic)
	ret0, _ := ret[0].(*entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNsqTopicEntity indicates an expected call of CreateNsqTopicEntity.
func (mr *MockiSyncTopicsRepoMockRecorder) CreateNsqTopicEntity(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNsqTopicEntity", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).CreateNsqTopicEntity), topic)
}

// DeleteNsqChannelEntity mocks base method.
func (m *MockiSyncTopicsRepo) DeleteNsqChannelEntity(topic, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNsqChannelEntity", topic, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNsqChannelEntity indicates an expected call of DeleteNsqChannelEntity.
func (mr *MockiSyncTopicsRepoMockRecorder) DeleteNsqChannelEntity(topic, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNsqChannelEntity", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).DeleteNsqChannelEntity), topic, channel)
}

// DeleteNsqTopicEntity mocks base method.
func (m *MockiSyncTopicsRepo) DeleteNsqTopicEntity(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNsqTopicEntity", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNsqTopicEntity indicates an expected call of DeleteNsqTopicEntity.
func (mr *MockiSyncTopicsRepoMockRecorder) DeleteNsqTopicEntity(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNsqTopicEntity", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).DeleteNsqTopicEntity), topic)
}

// GetAllChannels mocks base method.
func (m *MockiSyncTopicsRepo) GetAllChannels(topic string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannels", topic)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChannels indicates an expected call of GetAllChannels.
func (mr *MockiSyncTopicsRepoMockRecorder) GetAllChannels(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannels", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).GetAllChannels), topic)
}

// GetAllNsqChannelByTopic mocks base method.
func (m *MockiSyncTopicsRepo) GetAllNsqChannelByTopic(topic string) ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsqChannelByTopic", topic)
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsqChannelByTopic indicates an expected call of GetAllNsqChannelByTopic.
func (mr *MockiSyncTopicsRepoMockRecorder) GetAllNsqChannelByTopic(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsqChannelByTopic", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).GetAllNsqChannelByTopic), topic)
}

// GetAllNsqTopicEntities mocks base method.
func (m *MockiSyncTopicsRepo) GetAllNsqTopicEntities() ([]entity.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNsqTopicEntities")
	ret0, _ := ret[0].([]entity.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNsqTopicEntities indicates an expected call of GetAllNsqTopicEntities.
func (mr *MockiSyncTopicsRepoMockRecorder) GetAllNsqTopicEntities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNsqTopicEntities", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).GetAllNsqTopicEntities))
}

// GetAllTopics mocks base method.
func (m *MockiSyncTopicsRepo) GetAllTopics() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTopics")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTopics indicates an expected call of GetAllTopics.
func (mr *MockiSyncTopicsRepoMockRecorder) GetAllTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTopics", reflect.TypeOf((*MockiSyncTopicsRepo)(nil).GetAllTopics))
}
